{"version":3,"sources":["components/ContactForm.js","components/ContactList.js","components/Filter.js","App.js","serviceWorker.js","index.js"],"names":["ContactForm","state","name","number","handleChange","e","target","value","setState","handleSubmit","preventDefault","props","onAddContact","this","className","onSubmit","htmlFor","id","type","onChange","Component","ContactList","contacts","onRemove","map","key","onClick","Filter","onChangeFilter","App","filter","addContact","contact","uuidv4","prevState","removeContact","contactId","changeFilter","getVisibleContacts","toLowerCase","includes","persistedContacts","localStorage","getItem","JSON","parse","prevProps","setItem","stringify","visibleContacts","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bdd1393b.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport default class ContactForm extends Component {\n\n    state={\n        name:'',\n        number:''\n    }\n\n    handleChange = e => {\n       const  {name,value} = e.target\n       this.setState({[name]:value})\n    //    console.log( [name] , value )\n    }\n\n    handleSubmit = e => {\n        e.preventDefault()\n        this.props.onAddContact(this.state)\n        this.setState({name:'',number:''})\n    }\n\n    render (){\n        const {name,number} = this.state\n\n    return (\n    <form className='contact-form' onSubmit={this.handleSubmit}>\n    <label htmlFor='name'> Name:  </label>\n        <input \n        value={name} \n        name='name' \n        id='name' \n        type='text' \n        onChange={this.handleChange}/>\n    <label htmlFor='number'> Number:  </label>\n        <input \n        value={number} \n        name='number' \n        id='number' \n        type='text' \n        onChange={this.handleChange}/>\n        <button type='submit'> Add contact</button>\n   \n    </form>)\n}\n}\n\n","import React from 'react'\n\nconst ContactList = ({contacts, onRemove}) =>{\n\n    return (\n    <ul className='contacts-list'>\n        { contacts.map(({id,name,number}) => \n            <li key={id} className='contacts-item'> \n            <span className='contact-name'> {name} : {number} </span>\n                \n                <button onClick={()=> onRemove(id)}>remove </button>\n            </li>\n        )}\n     </ul>\n    )\n   \n}\n\nexport default ContactList","import React from 'react'\n// import React from 'react'\n\nconst Filter = ({value, onChangeFilter}) =>{\n    return(\n        <div className='filter-container'>\n        <label htmlFor='filter'>Find contacts by name</label>\n            <input\n                type='text'\n                id='filter'\n                value={value}\n                onChange={(e) => onChangeFilter(e.target.value)}\n            />\n        </div>\n    )\n}\n\n\nexport default Filter;","import React, {Component} from 'react';\nimport ContactForm from './components/ContactForm'\nimport ContactList from './components/ContactList'\nimport Filter from './components/Filter'\nimport { v4 as uuidv4 } from 'uuid';\nimport './App.css';\n\nexport default class App extends Component{\n\n  state = {\n    contacts:[],\n    filter:'',\n  }\n\n  componentDidMount(){\n    // console.log('contacts componentDidMount')\n    const persistedContacts = localStorage.getItem('contacts')\n    // проверяем или LS не возвращает null\n    if(persistedContacts){\n      this.setState({contacts: JSON.parse(persistedContacts) })\n    }\n\n  }\n\n  componentDidUpdate(prevProps, prevState){\n    // console.log(\"contacts componentDidUpdate\")\n    //Чтобы не создать бесконечный цикл, перезаписываем только по условию\n    if (prevState.contacts !== this.state.contacts){\n      localStorage.setItem('contacts', JSON.stringify(this.state.contacts))\n    }\n    \n  }\n\n  //добавляем новый контакт, имя и номер возьмем из state ContactForm, id генерим тут\n  addContact = ({name,number}) =>{\n    const contact = {\n      id:uuidv4(),\n      name: name,\n      number:number\n    }\n  //распыляем старый массив и добавляем к нему новый контакт\n    this.setState(prevState => {\n      return{contacts: [...prevState.contacts,contact]}\n    })\n  }\n\n  removeContact = contactId => {\n    // console.log(contactId)\n    this.setState(prevState=>{\n      return {contacts: prevState.contacts.filter(({id}) => id !== contactId)}\n    })\n  }\n\n  changeFilter = (filter) =>{\n    this.setState({filter})\n\n  }\n\n  getVisibleContacts = () =>{\n    const {contacts,filter} = this.state\n    // console.log(filter)\n    return contacts.filter(contact => contact.name.toLowerCase().includes(filter.toLowerCase()))\n    \n  }\n\n  render(){\n\n    const {contacts,filter} = this.state;\n    const visibleContacts = this.getVisibleContacts()\n\n  return (\n\n    <div className='pnohebook-container'>\n\n    <h1>Phonebook</h1>\n        <ContactForm onAddContact={this.addContact} />\n       \n    <h2>Contacts</h2>\n    {contacts.length > 1 && <Filter onChangeFilter={this.changeFilter} value={filter}/>}\n    {visibleContacts.length > 0 && <ContactList contacts={visibleContacts} onRemove={this.removeContact}/>}\n\n    </div>\n  )\n}\n}\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}